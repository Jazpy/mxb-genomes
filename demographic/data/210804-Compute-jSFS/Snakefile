CHROMOSOMES = range(1, 23)

		
CATEGORIES = {
    'synonymous': 'synonymous_variant',
    'missense': 'missense_variant',
    'lof': '(stop_gained|frameshift_variant|stop_lost|start_lost|inframe_insertion|inframe_deletion)', # loss of function
    'intergenic': 'intergenic_variant'
}


# rule concat_vcfs_and_extract_biallelic:
#     # Concat all the vcfs into one and
#     # extract only the biallelic SNPs.
#     input:
#         expand("../../../results/data/210713-HardyW-filters/1TGP_and_50MXB-chr{chrn}-snps-vep-mask-HW-GRCh38.vcf.gz", chrn=CHROMOSOMES)
#     output:
#         temp("data/all-biallelicSnps.vcf.gz")
#     shell:
#         """
#         bcftools concat {input} |\
#             bcftools view -m2 -M2 -v snps -Oz -o {output}
#         """

## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## Variants: VCFs

rule var_id_to_vep_consequences:
    input:
        # A vcf that has VEP annotation in the INFO field
        "../../../results/data/210713-HardyW-filters/1TGP_and_50MXB-chr{chrn}-snps-vep-mask-HW-GRCh38.vcf.gz"
    output:
        temp("data/variants-cats/variants-csq-chr{chrn}.txt")
    shell:
        # The -d option in the bcftools command is to
        # To print each consequence on a separate line,
        # rather than as a comma-separachrnted string on a single line.
        # This will make easier the task processing
        """
        bcftools +split-vep {input} -f '%ID\t%Consequence\n' -d >{output}
        """


def get_var_from_cat(wildcards):
    return CATEGORIES[wildcards.cat]


rule subset_var_cat:
    # Get a list of the SNPs that are from
    # the given category
    input:
        "data/variants-cats/variants-csq-chr{chrn}.txt"
    output:
        temp("data/variants-cats/csq-{cat}-chr{chrn}.txt")
    params:
        cat = get_var_from_cat
    shell:
        """
        grep -E '{params.cat}' {input} |\
            cut -f1 |\
            sort |\
            uniq > {output}
        """


rule subset_vcf_vars:
    input:
        vcf = "../../../results/data/210713-HardyW-filters/1TGP_and_50MXB-chr{chrn}-snps-vep-mask-HW-GRCh38.vcf.gz",
        ids_type = "data/variants-cats/csq-{cat}-chr{chrn}.txt"
    output:
        temp("data/vcfs/Snps-csq-{cat}-chr{chrn}.vcf.gz")
    shell:
        """
        bcftools view -i 'ID=@{input.ids_type}' {input.vcf} |\
            bcftools view -m2 -M2 -v snps |\
            bcftools annotate --remove INFO -Oz -o {output}
        """

rule merge_vcf_cat:
    input:
        expand("data/vcfs/Snps-csq-{{cat}}-chr{chrn}.vcf.gz", chrn=CHROMOSOMES)
    output:
        temp("data/vcfs/Allchroms-SNPs-csq-{cat}.vcf.gz")
    shell:
        """
        bcftools concat {input} -Oz -o {output}
        """


## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## ANCESTRAL GENOME

rule ancestal_genome:
    # NOTE:
    #   ancestral genome GRCh38 can be found here: ftp://ftp.ensembl.org/pub/current_fasta/ancestral_alleles/homo_sapiens_ancestor_GRCh38.tar.gz
    input:
        expand("../../../../gene-genealogies-mxb/resources/210719-ancestral-genome/homo_sapiens_ancestor_GRCh38/homo_sapiens_ancestor_{chrn}.fa", chrn=CHROMOSOMES)
    output:
        temp("data/ancestral-genome/ancestral-genome-autosomes.fasta")
    shell: "python concat-ancestral-chromosomes.py"


## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## Populations to use for SFS

rule define_pops:
    # for each population I sample
    # 25 individuals
    output:
        "data/populations/pops-five.csv",
        "data/populations/pops-single.csv"
    shell: "python makepopsinfo.py"



## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## -> -> -> -> -> -> -> -> -> -> -> ->
## Compuete Spectrums

rule sfs_1d_MXL:
    input:
        vcf = "data/vcfs/Allchroms-SNPs-csq-{cat}.vcf.gz",
        ancgenome = "data/ancestral-genome/ancestral-genome-autosomes.fasta",
        poplabs = "data/populations/pops-single.csv"
    output:
        "data/spectrums/1d-csq-{cat}-stats.txt",
        "data/spectrums/1d-csq-{cat}-spectrum.pkl"
    params:
        out = "data/spectrums/1d-csq-{cat}"
    shell:
        """
        python ../../../scripts/jsfs.py -vcf {input.vcf} \
            -poplabs {input.poplabs} \
            -ancgenome {input.ancgenome} \
            -out {params.out}
        """



rule jsfs:
    input:
        vcf = "data/vcfs/Allchroms-SNPs-csq-{cat}.vcf.gz",
        ancgenome = "data/ancestral-genome/ancestral-genome-autosomes.fasta",
        poplabs = "data/populations/pops-five.csv"
    output:
        "data/spectrums/5d-csq-{cat}-stats.txt",
        "data/spectrums/5d-csq-{cat}-spectrum.pkl"
    params:
        out = "data/spectrums/5d-csq-{cat}"
    shell:
        """
        python ../../../scripts/jsfs.py -vcf {input.vcf} \
            -poplabs {input.poplabs} \
            -ancgenome {input.ancgenome} \
            -out {params.out}
        """

rule compress_jsj:
    input:
        "data/spectrums/5d-csq-{cat}-spectrum.pkl"
    output:
        "data/spectrums/5d-csq-{cat}-spectrum.pkl.gz"
    shell: "gzip {input}"


rule all:
    input:
        #expand("data/spectrums/5d-csq-{cat}-spectrum.pkl", cat=CATEGORIES.keys()),
        expand("data/spectrums/1d-csq-{cat}-spectrum.pkl", cat=CATEGORIES.keys())
