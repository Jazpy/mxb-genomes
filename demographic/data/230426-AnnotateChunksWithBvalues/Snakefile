## -> -> -> -> -> -> -> -> -> -> -> ->
## HELPER FUNCTIONS AND GLOBAL BARS
## I copy the globlal variables next from: ../220113-ConstructBoostrapedDatasets/Snakefile
## -> -> -> -> -> -> -> -> -> -> -> ->
CHROM = list(range(1, 23))
N_BOOSTRAPS = 288
B_SCORES_QUANTILES = [1, 2, 3, 4]

# These spectrums are empty for some categories (i.e. there are not variants there)
# they will be excluded.
BOOSTRAPs_TO_DROP = [
    12,
    13,
    14,
    56,
    159,
    160,
    209,
    217,
    220,
    221,
    231,
    270,
    279,
    284
]
BOOSTRAPS = list(range(1, N_BOOSTRAPS + 1))
for x in BOOSTRAPs_TO_DROP: BOOSTRAPS.remove(x)


CATEGORIES = {
    'intergenic': 'intergenic_variant',
    'intronic': 'intron_variant'
}

rule bmap:
    input:
        expand('../230426-B-values/data/Bmaps/CADD_bestfit-GRCh38/chr{chrn}.bmap.bed', chrn=CHROM)
    output:
        'data/caad-bestfit-GRCh38.bmap.bed'
    shell:
        '''
        cat {input} |\
            awk '{{print $1"\t"$2"\t"$3"\t.\t"$4}}' |\
            #Â remove chr prefix
            sed 's/^chr//' > {output}
        '''


rule bmap_in_chunk:
    """
    We want to obtain the Bmap for the given chunk.
    meaning the overlapping
    """
    input:
        chunk = '../220113-ConstructBoostrapedDatasets/data/chunks/chunk_{N}.bed',
        bmap = 'data/caad-bestfit-GRCh38.bmap.bed'
    output:
        'data/chunks-maps/chunk_{N}.bmap.bed'
    shell:
        '''
        bedtools intersect -a {input.bmap} -b {input.chunk} -wa > {output}
        '''

rule bmap_score:
    """
    annotate the B-score for each chunk.
    """
    input:
        expand('data/chunks-maps/chunk_{N}.bmap.bed', N=BOOSTRAPS)
    output:
        'results/bscores.txt'
    shell:
        '''
        touch {output}
        for chunk in {input}; do
            echo $chunk
            python scripts/weighted_mean.py $chunk >>{output}
        done
        '''

rule categorize_chunks_by_bquartile:
    """
    Use quartiles to categorize the chunks by B-score.
    """
    input:
        'results/bscores.txt'
    output:
        expand('data/chunks-by-bscores-q{qrt}.txt', qrt=B_SCORES_QUANTILES),
    shell:
        '''
        python scripts/split-chunks-by-bscore.py
        '''


rule make_files:
    """
    Here, I creat links to the original files.
    Just to have things more organized.

    I use the following structure:

      data:
        chunks:
          q1: files
          q2
          q3
          q4
        mLs:
        spectrums:
    """
    input:
        'data/chunks-by-bscores-q{qrt}.txt'
    output:
        chunks = directory('data/chunks/q{qrt}')
    params:
        chunks_path = '../../../../220113-ConstructBoostrapedDatasets/data/chunks',
        # File name format chunk_252.bed
        ml_path = '../../../../220113-ConstructBoostrapedDatasets/data/mL-noncoding/mLs',
        # File name format mL_intergenic_chunk_267.txt and mL_introns_chunk_94.txt
        sfs_path = '../../../../220113-ConstructBoostrapedDatasets/data/jSFS/spectrums'
        # File name format spectrum_chunk_232_cat_intergenic.pkl.gz
        # and spectrum_chunk_229_cat_intronic.pkl.gz
    shell:
        '''
        mkdir -p {output}

        for chunk in $(cat {input}); do
            # chunk has name chunk_N
            echo $chunk
            # make the base filenames to link
            interval_f="${{chunk}}.bed"
            ln -s "{params.chunks_path}/${{interval_f}}" "{output.chunks}/${{interval_f}}"

            ml_intergenic_f="mL_intergenic_${{chunk}}.txt"
            ml_introns_f="mL_introns_${{chunk}}.txt"


        done
        '''
