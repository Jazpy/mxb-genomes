"""
Pipeline to compute mutation rates in coding regions.
"""

CHROM = list(range(1, 23))

CATEGORIES = {
    'synonymous': 'synonymous_variant',
    'missense': 'missense_variant',
    'lof': '(stop_gained|stop_lost|start_lost)' # lost of function
}



rule get_exonic_regions:
    """
    First we obtain the exonic regions of the human genome. Autosomes only.
    """
    output: 'data/regions/exones.bed'
    shell: 'Rscript scripts/get-exonic-regions.R'


rule masked_exons:
    """
    apply the mask we used for the vcfile
    """
    input:
        exons = 'data/regions/exones.bed',
        mask = '/data/users/smedina/data-resources/genome-masks/20160622.allChr.mask.bed'
    output:
        "data/regions/exones-mask.bed"
    shell:
        """
        bedtools intersect -a {input.exons} -b {input.mask} |\
            sortBed |\
            bedtools merge >{output}
        """

rule separate_coding_region_by_chromosome:
    """
    I do this to run the pipeline in parallel (by chromosome).
    """
    input:
        "data/regions/exones-mask.bed"
    output:
        'data/tmp/regions/chr{chrn}-exons.bed'
    shell:
        '''
        grep -E "^chr{wildcards.chrn}\t" {input} >{output}
        '''


rule get_all_possible_variants_in_Regions:
    input:
        bed = 'data/tmp/regions/chr{chrn}-exons.bed',
        genome = '/data/users/smedina/data-resources/genomes/GRCh38.primary_assembly.genome-nochrprefix.fasta'
    output:
        'data/tmp/variants/chr{chrn}.bed.gz'
    params:
        outbed = 'data/tmp/variants/chr{chrn}.bed'
    shell:
        '''
        python scripts/all-snps-in-regions.py {input.bed} {input.genome} {params.outbed}
        # I run a sort to make sure
        # we have only unique variants, so we are not counting overlapping regions twice
        # Then i sort the file by position.
        sort {params.outbed} |\
            uniq |\
            sort -k 2,2n |\
            gzip >{output}
        rm -f {params.outbed}
        '''


rule predict_variants:
    input:
        'data/tmp/variants/chr{chrn}.bed.gz'
    output:
        'data/tmp/variants/vep-chr{chrn}.txt.gz',
        'data/tmp/variants/vep-chr{chrn}.txt.gz_summary.html'
    threads: 22
    shell:
        """
        ~/ensembl-vep/vep -i {input} --cache  \
            --fork {threads} --verbose \
            --assembly GRCh38 --tab --output_file {output[0]} \
            --compress_output gzip  --fields \
            'Uploaded_variation,Location,Allele,Gene,Feature_type,Consequence,Codons'
        """


def vep_get_consequence_SO_term(wildcards):
    """
    The SO term is use to annotate the variant consequence.
    See: https://m.ensembl.org/info/genome/variation/prediction/predicted_data.html
    """
    return CATEGORIES[wildcards.varcat]


rule get_variant_cat:
    """
    Filters the variants by category
    and selects unqique rows. VEP sometimes duplicates rows.
    """
    input:
        'data/tmp/variants/vep-chr{chrn}.txt.gz'
    output:
        temp("data/tmp/varcat/chr{chrn}-{varcat}.txt")
    params:
        so_term = vep_get_consequence_SO_term
    shell:
        """
        zcat {input} |\
            grep -E '{params.so_term}' |\
            cut -f1,2,3,4,7 |\
            sort |\
            uniq >{output}
        """


rule get_all_genome_vars:
    """
    One variant file for all the genome
    """
    input:
        expand("data/tmp/varcat/chr{chrn}-{{varcat}}.txt", chrn=CHROM)
    output:
        "data/tmp/varcat/all-{varcat}.txt"
    shell:
        """
        cat {input} >{output}
        """


rule count_variants:
    input:
        "data/tmp/varcat/all-{varcat}.txt"
    output:
        "data/variant-counts/all-{varcat}.tsv"
    shell:
        """
        python scripts/count-context-seqs.py {input} {output}
        """


rule compute_mL:
    input:
        "../211128-compute-mL/data/mutation_rate_methylation_bins.txt",
        "data/variant-counts/all-{varcat}.tsv"
    output:
        "results/mL-{varcat}.txt"
    shell:
        """
        python scripts/compute-mL.py {input[1]} {input[0]} {output}
        """


rule all:
    input:
        expand("results/mL-{varcat}.txt", varcat=CATEGORIES.keys())
        
    

