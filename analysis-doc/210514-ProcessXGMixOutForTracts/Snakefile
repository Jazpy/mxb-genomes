import pandas as pd
import sys
sys.path.append('../../')
from mxbgenomes.utils import load_populations_info

CHROM = range(1, 23)

# Get the list of admixed samples, samples in pops PEL, PUR, CLM, MXL
pops = load_populations_info('../..')
# Here, we only focus on admixed populations
pops = pops[pops.Subpopulation.isin(['MXL', 'PEL', 'PUR', 'CLM'])]
SAMPLES = pops.Samplename.tolist()

# dict mapping popnames to samples
ADMIXDED_POPS = pops.groupby('Subpopulation')['Samplename'].apply(list).to_dict()


rule merge_xgmix_chromosome:
    # Merge the XGMix msp files
    # to have one for all the genome
    input:
        expand("../../results/data/210409-local-ancestry/{{Np}}-pops/predictions/mdl-{chrn}.msp.tsv", chrn=CHROM)
    output:
        "data/{Np}-pops/all-msp.csv"
    params:
        path_to_msp_files = "../../results/data/210409-local-ancestry/{Np}-pops/predictions/"

    shell:
        """
        python scripts/combine-chromosomes-xgmix.py {params.path_to_msp_files} {output}
        """


rule remove_low_coverage_tracts:
    input:
        "data/{Np}-pops/all-msp.csv"
    output:
        "data/{Np}-pops/all-msp-lowCovClean.csv"
    params:
        # How many windows to remove?
        topN = 22
    shell:
        """
        python scripts/remove_low_cov_windows.py {input} {params.topN} {output}
        """


rule process_admixed_samples:
    input:
        "data/{Np}-pops/all-msp-lowCovClean.csv"
    output:
        "data/{Np}-pops/bed/{sample}.bed"
    params:
        outdir = "data/{Np}-pops/bed",
        sample = "{sample}"
    shell:
        """
        python scripts/process-individuals.py {input} {params.outdir} {params.sample}
        """


rule plot_karyogram:
    input:
        "data/{Np}-pops/bed/{sample}.bed"
    output:
        "plots/{Np}-pops/karyogram-{sample}.png"
    script:
        "scripts/karyotype-local-ancestry-plot.R"


def population_to_samples_bed(wildcards):
    return expand("data/{{Np}}-pops/bed/{sample}.bed", sample=ADMIXDED_POPS[wildcards.subpop])


rule make_tracts_input_subpop:
    # This rule will generate the output bed files
    # in a format ready to use with Tracts
    input:
        population_to_samples_bed
    output:
        directory("data/{Np}-pops/tracts/{subpop}")
    params:
        outdir = "data/{Np}-pops/tracts/{subpop}"
    shell:
        """
        mkdir -p {params.outdir}
        for samplebed in {input}
        do
            # extract the sample name from the input bed file
            sample_name=$(basename -s .bed $samplebed)
            echo "processing: $sample_name"
            python scripts/make_tracts_input.py $samplebed $sample_name {params.outdir}
        done
        """


rule all:
    input:
        expand("data/{Np}-pops/tracts/{subpop}", Np= ['3', '4'], subpop=['PUR', 'MXL', 'CLM', 'PEL'])
