"""
Compute the SFS for synonymous and nonsynonymous variants

NOTES:
    - To run this pipeline you need to activate the popgene conda environment:
        conda activate popgene
    - Also, I use the bcftools pluggin split-vep: https://samtools.github.io/bcftools/howtos/plugin.split-vep.html
        The varible BCFTOOLS_PLUGINS should point to the correct path.
"""


# I use a regular expression with the variant consequences I want
# to retrieve, see: https://m.ensembl.org/info/genome/variation/prediction/predicted_data.html

SYNONYMOUS = '(synonymous_variant|stop_retained_variant|start_retained_variant)'
NON_SYNONYMOUS = '(missense_variant|inframe_deletion|inframe_insertion|frameshift_variant|stop_gained|coding_sequence_variant)'
CHROMOSOMES = range(1, 23)


CATEGORIES = {
    'synonymous': 'synonymous_variant',
    'missense': 'missense_variant',
    'loss_of_function': '(stop_gained|frameshift_variant|stop_lost|start_lost|inframe_insertion|inframe_deletion)',
    'intergenic': 'intergenic_variant',
    'intron': 'intron_variant',
    'utr_5_or_3': '(5_prime_UTR_variant|3_prime_UTR_variant)',

    # Now categories by impact
    'impact_HIGH': '(transcript_ablation|splice_acceptor_variant|splice_donor_variant|stop_gained|frameshift_variant|stop_lost|start_lost|transcript_amplification)',
    'impact_MODERATE': '(inframe_insertion|inframe_deletion|missense_variant|protein_altering_variant|)',
    'impact_LOW': '(splice_region_variant|incomplete_terminal_codon_variant|start_retained_variant|stop_retained_variant|synonymous_variant|coding_sequence_variant)'
}


rule concat_vcfs_and_extract_biallelic:
    # Concat all the vcfs into one and
    # extract only the biallelic SNPs.
    input:
        expand("../../results/data/210305-merged-with-1TGP/strict-mask/1TGP_and_50MXB-chr{chrn}-snps-vep-mask-GRCh38.vcf.gz", chrn=CHROMOSOMES)
    output:
        temp("data/all-biallelicSnps-vcf.gz")
    shell:
        """
        bcftools concat {input} |\
            bcftools view -m2 -M2 -v snps -Oz -o {output}
        """


rule concat_ancestral_allel:
    input:
        expand("../210506-AncestralAlleleData/data/aa-chr{chrn}.csv", chrn=CHROMOSOMES)
    output:
        temp("data/all-ancestral-allel.csv")
    shell:
        """
        awk '(NR == 1) || (FNR > 1)' {input} >{output}
        """


rule var_id_to_vep_consequences:
    input:
        # A vcf that has VEP annotation in the INFO field
        "data/all-biallelicSnps-vcf.gz"
    output:
        temp("data/variants-csq.txt")
    shell:
        # The -d option in the bcftools command is to
        # To print each consequence on a separate line,
        # rather than as a comma-separated string on a single line.
        # This will make easier the task processing
        """
        bcftools +split-vep {input} -f '%ID\t%Consequence\n' -d >{output}
        """


def get_var_from_cat(wildcards):
    return CATEGORIES[wildcards.cat]


rule subset_var_cat:
    # Get a list of the SNPs that are from
    # the given category
    input:
        "data/variants-csq.txt"
    output:
        "data/var-{cat}.txt"
    params:
        cat = get_var_from_cat
    shell:
        """
        grep -E '{params.cat}' {input} |\
            cut -f1 |\
            sort |\
            uniq > {output}
            
        """


rule subset_vcf_vars:
    input:
        vcf = "data/all-biallelicSnps-vcf.gz",
        ids_type = "data/var-{cat}.txt"
    output:
        temp("data/vcf-{cat}.vcf.gz")
    shell:
        """
        bcftools view -i 'ID=@{input.ids_type}' {input.vcf} -Oz -o {output}
        """


rule sfs:
    input:
        temp("data/vcf-{cat}.vcf.gz"),
        temp("data/all-ancestral-allel.csv")
    output:
        "results/sfs-{cat}.csv",
        "results/aa-stats-{cat}.csv"
    shell:
        """
        python compute-sfs.py {input[0]} {input[1]} {output[0]} {output[1]}
        """


rule all:
    input:
        expand("results/sfs-{cat}.csv", cat=CATEGORIES.keys())
