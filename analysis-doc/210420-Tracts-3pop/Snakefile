# Tracts
import sys
sys.path.append('../../')
from mxbgenomes import utils


# Generate a dict mapping populations to samples
panel = utils.load_1tgp_metada('../../resources/1TGP-samples-meta-data/integrated_call_samples_v3.20130502.ALL.panel')
get_samples = lambda pop: panel[panel.Subpopulation == pop].Samplename.tolist()
pops = ['PEL', 'MXL', 'CLM', 'PUR']
POPS = {p: get_samples(p) for p in pops}

rule preprare_tracs_input:
    """
    this rule formats the input file so the
    output can be used with Tracts
    """
    input:
        "../210322-LocalAncestryVisuzlization/data/3-pops/bed/allchrn-{samplename}.tsv"
    params:
        out_dir = "data/{population}/"
    output:
        "data/{population}/{samplename}_anc_A_cM.bed",
        "data/{population}/{samplename}_anc_B_cM.bed"
    shell:
        """
        python scripts/prepare_tracts_input.py -bed {input} -ddir {params.out_dir}
        """


rule populations_input:
    input:
        # PEL
        expand("data/{population}/{samplename}_anc_A_cM.bed", population='PEL', samplename=POPS['PEL']),
        expand("data/{population}/{samplename}_anc_B_cM.bed", population='PEL', samplename=POPS['PEL']),

        # PUR
        expand("data/{population}/{samplename}_anc_A_cM.bed", population='PUR', samplename=POPS['PUR']),
        expand("data/{population}/{samplename}_anc_B_cM.bed", population='PUR', samplename=POPS['PUR']),

        # CLM
        expand("data/{population}/{samplename}_anc_A_cM.bed", population='CLM', samplename=POPS['CLM']),
        expand("data/{population}/{samplename}_anc_B_cM.bed", population='CLM', samplename=POPS['CLM']),

        # MXL
        expand("data/{population}/{samplename}_anc_A_cM.bed", population='MXL', samplename=POPS['MXL']),
        expand("data/{population}/{samplename}_anc_B_cM.bed", population='MXL', samplename=POPS['MXL'])

